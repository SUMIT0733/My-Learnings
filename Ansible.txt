================================================================
						ANSIBLE
================================================================
-> Configuration management tool

========================INVENTORY=============================
to access the list of target hosts (agentless) for ssh for linux and powershell for windows
default inventory file = /etc/ansible/hosts
	list of server grups by [SERVER_GRP]
	EX. server1.host
		server2.host
		
		[mail]
		server3.host
		server4.host
[name] ansible_host=[HOST/IP] ansible_connection=[ssh/winrm/localhost] ansible_port=[PORT NUMBER] ansible_user=[USERNAME OF HOST] ansible_ssh_pass=[PASSWORD TO SSH]

cmd : ansible [name] -m [module_name EX. ping] -i [inventory.txt file]


=================================YAML====================================
Key:Value
[ARRAY_NAME:]
- item1
- item2

[DICTIONARY_NAME]:
	key1:value1
	key2:value2
	
==========================PLAYBOOK================================
hosts:localhost/all/[NODES]
connection:local (for localhost)
become: true(for root privilege)
List of dictionaries
each contains: name, host(GRP in inventory / single host), tasks -> list of tasks(dictionary)
each tasks are executed by modules: command, script, yum, service etc.

--------------------SAMPLE PLAYBOOK----------------------------------
- name: Using a REST API
  become: false
  hosts: localhost
  gather_facts: false
  tasks:
    - debug:
        msg: “Let’s call an API”
--------------------------------------------------------------------

ansible-playbook {PLAYBOOK_YAML_FILE}
ansible-playbook --help

ansible [HOST] -a [COMMAND] = ansible all -a '/bin/bash'
ansible [HOST] -m [MODULE] = ansbile host1 -m ping

ansbile-playbook [PLAYBOOK_NAME]

=========================MODULES=================================
System(System level tasks): modifying user, grp, host,ping, timezone, firewall

command(execute command on host): script, shell, command etc 
File: ACL, copy, paste, archive, find, replace
databse: mongo, sql, mysql, postgres
cloud: amazon, google, azure, 
windows(windows command specific): win_copy, win_msi, win_package, win_shell, win_user 

=> command: [COMMAND TO RUN] => command: cat /etc/ansible/hosts
=> script: [SCRIPT TO RUN] => script: playbook.sh -arg1

Manages service -start, -stop, -restart
=> service: name=[SERVICE_NAME] state=[OPERATION-started/stopped/restarted]
----------------OR-------------------
service:
	name:[SERVICE_NAME]
	state=[OPERATION-started/stopped/restarted]

lineinfile: search for line and replace it, or add the line
=> lineinpath:
		path: [PATH TO FILE]
		line: [NEW LINE]
uri:
    url: https://api.chucknorris.io/jokes/random
    method: GET
name: Login to an API
uri:
    url: https://auth.example.com/oauth/access_token
    method: POST
    body_format: json
    body:
      name: your_username
      password: your_password
      client_id: YOUR_CLIENT_ID
      access_token: ACCESS_TOKEN
      connection: CONNECTION
      scope: SCOPE
		

===========================VARIABLES=========================
name, host, tasks, 
vars:
	[VARIABLE_NAME]: [VALUE]

USAGE: '{{VARIABLE_NAME}}'

separate file: include key:value in {HOST}.yml => use as normal

=======================CONDITIONS================================
under tasks block, use WHEN: {CONDITION} to check the run the task or not
can use 'and' / 'or' 
ansible_os_family => built-in variable to find the OS of the target host

==================OUTPUT====================================
=> Register the output of the previous task: register: [VARIABLE_NAME] => to print [VARIABLE_NAME].stdout => find looks for string and return position, else -1
 INSTEAD OF THIS, USE "LINEINFILE" module.

==========================LOOPS=======================================
stores the index in "item", then use '{{item.[VARIABLES]}}' if dictionary, else '{{item}}' to access it

=====================ROLEs=======================================
create a separate template of tasks and re-use it in multiple playbooks
name:
hosts:
roles:
	- mysql

=> create Roles folder in ansible project
=> create Roles at /etc/ansible/roles => default path located in /etc/ansible/ansible.cfg

ansible-galaxy repository for existnig roles
ansible-galaxy init [ROLE_NAME]
ansible-galaxy search [ROLES]
ansible-galaxy install [ROLES]
ansible-galaxy list 
ansible-config dump | grep ROLE






================================Linux Apache Mysql PHP===================
Linux: 
1) Install Firewall
 yum install firewalld
 service firewalld start
 systemctl enable firewalld

Mysql
6) Install DB
7) Configure DB
8) Start DB
9) Configure firewall
10) Configure DataBase(Real data)
11) load data

	yum installmariadb-server
	vi /etc/my.cnf (Configure port)
	service mariadb start
	systemctl enable mariadb
	firewall-cmd --permanent --zone=public --add-port=3306/tcp
	firewall-cmd --reload
	
	CREATE DB;
	CREATE USER 'user@host' IDENTIFIED BY 'pwd'
	GRANT ALL PRIVILAGES ON . to user@host
	FLUSH PRIVILAGES
	
	load DB SCRIPT

Apache
2) Install httpd
3) Configure httpd
4) configure firewall
5) start httpd

	yum install httpd php php-mysql
	firewall-cmd --permanent --zone=public --add-port=80/tcp
	firewall-cmd --reload
	
	vi /etc/httpd/conf/httpd.conf (configure default landing page of website)
	
	service httpd start
	systemctl enable httpd
	
	git clone <REPO> /var/www/html
	update code with correct host, port and creds

PHP
12) Install PHP
13) Configure code

	curl http://localhost
	
	
================================ FILE STRUCTURE =====================================
UPDATE inventory file: remove host details expect <HOST_NAME>
host_vars/<HOST_NAME>.yml
	ansible_host: xxx.xxx.xxx.xxx
	ansible_ssh_pass: XXXXXXXX
group_vars/...

============================ INCLUDE ====================
-> create tasks/<TASK_NAME>.yml files
-> use that file in tasks of playbook.yml file
	tasks:
		- include: tasks/<TASK_NAME>.yml
		- include: tasks/<TASK_NAME>.yml
